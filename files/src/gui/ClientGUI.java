package gui;

import client.Client;
import common.UtilityClass;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;

// classe che implementa il metodo astratto di Client
public class ClientGUI extends Client {

    // frame e panel visualizzati
    private JFrame gameJFrame;
    private JPanel gamePanel;

    // informazioni sulla sfida
    private JTextArea serverMessageJTextArea;

    public ClientGUI() {
        super();
    }

    public void gameGui(JFrame mainShellJFrame) throws IOException {
        // frame di informazioni sulla sfida
        gameJFrame = new JFrame("Quizzle");
        gameJFrame.setContentPane(gamePanel);
        gameJFrame.pack();
        gameJFrame.setVisible(true);
        gameJFrame.setResizable(false);

        // in chiusura del frame di gioco torna alla shell
        gameJFrame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                super.windowClosing(e);
                // pulisce il jtextarea
                serverMessageJTextArea.setText("");
                gameJFrame.setVisible(false);
                mainShellJFrame.setVisible(true);
            }
        });

    }

    /**
     * Match tra due utenti
     */
    public void game() {
        // inizializzo le informazioni sulla sfida
        serverMessageJTextArea.append("Preparazione sfida in corso...\n");
        String toServer, fromServer;
        try {
            // attendo le parole di setup del server e le aggiungo al JTextarea.
            while (!(fromServer = getIn().readLine()).equals("fine")) {
                serverMessageJTextArea.append(fromServer + "\n");
            }

            // thread che mi interrompe dopo K secondi se non ho finito (tempo scaduto)
            Thread timer = new Thread(new TimerGUI());
            timer.start();

            while (true) {
                fromServer = getIn().readLine();
                System.out.println(fromServer);

                /*
                 questi due casi non sono parole del game:
                 se ho finito, oppure se la partita e' terminata,
                 il mess successivo sara' di nuovo del server e viene messo nel JTextArea
                 */
                if (fromServer.startsWith("Hai finito")) {
                    // finito per primo, interrompo il thread "timer"
                    timer.interrupt();
                    serverMessageJTextArea.append(fromServer + "\n");
                    continue;
                } else if (fromServer.startsWith("Partita terminata")) {
                    // game finito da entrambi in tempo
                    timer.interrupt();
                    serverMessageJTextArea.append(fromServer + "\n");
                    // esito dal server
                    while (!(fromServer = getIn().readLine()).equals("fine")) {
                        serverMessageJTextArea.append(fromServer + "\n");
                    }
                    serverMessageJTextArea.append("\nChiudi questa schermata per tornare alla shell.\n");
                    return;
                }

                // query del server visualizzata nel Dialog, risposta inserita nel textField
                toServer = JOptionPane.showInputDialog(fromServer);
                // il tasto annulla corrisponde a passare
                if (toServer == null) {
                    toServer = "";
                }
                // se non e' ancora scaduto il tempo invio la risposta del textfield
                if (timer.isAlive()) {
                    getOut().writeUTF(toServer);
                }
            }
        } catch (IOException e) {
            serverMessageJTextArea.append("\nServer offline\nChiudi questa schermata per tornare alla shell.\n");
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        gamePanel = new JPanel();
        gamePanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        gamePanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLoweredBevelBorder(), "Sfida", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, new Color(-15578693)));
        serverMessageJTextArea = new JTextArea();
        serverMessageJTextArea.setText("");
        gamePanel.add(serverMessageJTextArea, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(450, 200), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return gamePanel;
    }
    
    public static void main(String[] args) {
        UtilityClass.readConfig();
        LoginGUI loginGUI = new LoginGUI();
        loginGUI.show();
    }
    
}


