package gui;
import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;

// frame di login, il primo aperto
public class LoginGUI {
    private JFrame loginJFrame;
    private JPanel loginJPanel;
    private JTextField loginJTextField;
    private JPasswordField passwordJPasswordField;
    private JButton loginJButton;
    private JLabel registerJLabel;
    private JPanel welcomeJPanel;
    private JLabel usernameJLabel;
    private JLabel passwordJLabel;
    private JLabel titleJPanel;

    // client che instaurera' la connessione
    private ClientGUI client;
    // frame che verra' aperto se si registra
    private RegisterGUI registerGUI;

    public void show() {
		loginJFrame = new JFrame("Quizzle");
        loginJFrame.setContentPane(loginJPanel);
        loginJFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        loginJFrame.pack();
        loginJFrame.setVisible(true);
		
	}
    
    public LoginGUI() {
        // istanzia client
        client = new ClientGUI();

        // evidenzia/sottolinea al passaggio del mouse
        registerJLabel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                super.mouseEntered(e);
                registerJLabel.setText(("<HTML><U>Non sei ancora registrato? Clicca qui!</U></HTML>"));
                registerJLabel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            }
        });

        // stato originale in uscita
        registerJLabel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent e) {
                super.mouseExited(e);
                registerJLabel.setText(("Non sei ancora registrato? Clicca qui!"));
            }
        });

        // clicca  sulla scritta di cui sopra e si apre il frame atto alla registrazione
        registerJLabel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                // frame di registrazione
                registerGUI = new RegisterGUI(client);
            }
        });

        // prova a loggare, instaura una connessione col server
        loginJButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent mouseEvent) {
                super.mouseClicked(mouseEvent);
                try {
                    // login
                    String username = loginJTextField.getText();
                    String password = new String(passwordJPasswordField.getPassword());
                    // esito server
                    String fromServer = client.login(username, password);
                    // chiudo il form di registrazione se aperto
                    if (registerGUI != null) {
                        registerGUI.close();
                    }
                    // connesso
                    if (fromServer.endsWith("successo")) {
                        // apro il JFrame con tutte le operazioni e dati visibili
                        new ShellGUI(username, client);
                        // chiudo la schermata di login
                        loginJFrame.setVisible(false);
                        loginJFrame.dispose();

                        // non connesso
                    } else {
                        JOptionPane.showMessageDialog(new JFrame(), fromServer, "Quizzle", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }

            }
        });
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        loginJPanel = new JPanel();
        loginJPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 14, new Insets(0, 0, 0, 0), -1, -1));
        welcomeJPanel = new JPanel();
        welcomeJPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(50, 100, 50, 100), -1, -1));
        welcomeJPanel.setBackground(new Color(-13092808));
        loginJPanel.add(welcomeJPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 14, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        welcomeJPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        titleJPanel = new JLabel();
        Font titleJPanelFont = this.$$$getFont$$$("Noto Sans", Font.BOLD, 28, titleJPanel.getFont());
        if (titleJPanelFont != null) titleJPanel.setFont(titleJPanelFont);
        titleJPanel.setForeground(new Color(-1));
        titleJPanel.setText("Benvenuto in WordQuizzle");
        welcomeJPanel.add(titleJPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 12, new Insets(50, 50, 50, 50), -1, -1));
        loginJPanel.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 14, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        usernameJLabel = new JLabel();
        usernameJLabel.setText("username");
        panel1.add(usernameJLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        loginJTextField = new JTextField();
        panel1.add(loginJTextField, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, -1), null, 0, false));
        passwordJLabel = new JLabel();
        passwordJLabel.setText("password");
        panel1.add(passwordJLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, new Dimension(100, -1), null, 0, false));
        registerJLabel = new JLabel();
        registerJLabel.setText("Non sei ancora registrato? Clicca qui!");
        panel1.add(registerJLabel, new com.intellij.uiDesigner.core.GridConstraints(2, 4, 1, 8, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_SOUTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        loginJButton = new JButton();
        loginJButton.setText("login");
        panel1.add(loginJButton, new com.intellij.uiDesigner.core.GridConstraints(0, 5, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        passwordJPasswordField = new JPasswordField();
        panel1.add(passwordJPasswordField, new com.intellij.uiDesigner.core.GridConstraints(0, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, -1), null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(1, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(-1, 50), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return loginJPanel;
    }

}
